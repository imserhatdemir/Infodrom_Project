@page "/recursive"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject SweetAlertService swal
@using MudBlazor

<PageTitle>Organizasyon (Recursive)</PageTitle>
<MudButton Color="Color.Primary" Variant="@MudBlazor.Variant.Outlined" OnClick="AddOrganization">
    Organizasyon Ekle
</MudButton>

<table class="table">
    <thead>
        <tr>
            <th>Organizasyon ID</th>
            <th>Ad</th>
            <th>İşlemler</th>
        </tr>
    </thead>
    <tbody>
        @RenderOrganizations(organizationsList)
    </tbody>
</table>

@code {
    protected List<OrganizationModel> organizationsList = new();

    protected override async Task OnInitializedAsync()
    {
        await GetOrganizationRecursive();
    }

    protected async Task GetOrganizationRecursive()
    {
        string apiUrl = "https://localhost:7122/api/Organization/recursive";
        var response = await Http.GetAsync(apiUrl);
        response.EnsureSuccessStatusCode();
        string responseBodyJson = await response.Content.ReadAsStringAsync();
        organizationsList = JsonConvert.DeserializeObject<List<OrganizationModel>>(responseBodyJson);
    }

    private void AddOrganization()
    {
        NavigationManager.NavigateTo("/add-organization");
    }

    protected async Task DeleteOrganizationWithCheck(int Id)
    {
        string apiUrl = "https://localhost:7122/api/Organization/check/" + Id;
        var response = await Http.DeleteAsync(apiUrl);
        var result = await response.Content.ReadAsStringAsync();

        if (!response.IsSuccessStatusCode)
        {
            await swal.FireAsync(new SweetAlertOptions
                {
                    Icon = SweetAlertIcon.Error,
                    Title = "Hata",
                    Text = "Öncelikle ilgili organizasyonda bulunan personeli siliniz."
                });
        }
        else
        {
            await swal.FireAsync(new SweetAlertOptions
                {
                    Icon = SweetAlertIcon.Success,
                    Title = "Başarılı",
                    Text = "Silme işlemi başarılı"
                });
            await GetOrganizationRecursive();
        }
    }

    protected async Task NavigateToUpdateOrg(int Id)
    {
        string pageURl = "update-org/" + Id;

        NavigationManager.NavigateTo(pageURl);
    }

    private RenderFragment RenderOrganizations(List<OrganizationModel> orgs, int level = 0) => builder =>
      {
      int sequence = 0;
      foreach (var org in orgs)
      {
          builder.OpenElement(sequence++, "tr");
          builder.AddContent(sequence++, RenderTableCell(org.Id.ToString()));
          builder.AddContent(sequence++, RenderTableCell(new String('-', level * 2) + org.Ad));
          builder.OpenElement(sequence++, "td");
          builder.OpenElement(sequence++, "button");
          builder.AddAttribute(sequence++, "type", "button");
          builder.AddAttribute(sequence++, "class", "btn btn-danger");
          builder.AddAttribute(sequence++, "onclick", EventCallback.Factory.Create(this, () => DeleteOrganizationWithCheck(org.Id)));
          builder.AddContent(sequence++, "Delete");
          builder.CloseElement();
          builder.OpenElement(sequence++, "button");
          builder.AddAttribute(sequence++, "type", "button");
          builder.AddAttribute(sequence++, "class", "btn btn-primary");
          builder.AddAttribute(sequence++, "onclick", EventCallback.Factory.Create(this, () => NavigateToUpdateOrg(org.Id)));
          builder.AddContent(sequence++, "Edit");
          builder.CloseElement();
          builder.CloseElement(); // Close "td"
          builder.CloseElement(); // Close "tr"
          if (org.Children.Any())
          {
              builder.AddContent(sequence++, RenderOrganizations(org.Children, level + 1));
          }
      }
      };

    private RenderFragment RenderTableCell(string content) => builder =>
    {
        builder.OpenElement(0, "td");
        builder.AddContent(1, content);
        builder.CloseElement();
    };

}
