@page "/organizasyon"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject SweetAlertService swal
@using MudBlazor

<PageTitle>Organizasyon</PageTitle>
<MudButton Color="Color.Primary" Variant="@MudBlazor.Variant.Outlined" OnClick="AddOrganization">
    Organizasyon Ekle
</MudButton>
<table class="table">
    <thead>
        <tr>
            <th>Organizasyon ID</th>
            <th>Ad</th>
            <th>İşlemler</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var org in organizationsList)
        {
            <tr>
                <td>@org.Id</td>
                <td>@org.Ad</td>
                <td>
                    <button type="button" @onclick="(async () => await DeleteOrganizationWithCheck(org.Id))" class="btn btn-danger">Delete</button>
                    <button type="button" class="btn btn-primary" @onclick="(async () => await NavigateToUpdateOrg(org.Id))">Edit</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    protected List<OrganizationModel> organizationsList = new();

    protected override async Task OnInitializedAsync()
    {
        await GetOrganization();
    }

    protected async Task GetOrganization()
    {
        string apiUrl = "https://localhost:7122/api/Organization/get-org-list";
        var response = await Http.GetAsync(apiUrl);
        response.EnsureSuccessStatusCode();
        string responseBodyJson = await response.Content.ReadAsStringAsync();
        organizationsList = JsonConvert.DeserializeObject<List<OrganizationModel>>(responseBodyJson);
    }

    private void AddOrganization()
    {
        NavigationManager.NavigateTo("/add-organization");
    }

    protected async Task DeleteOrganizationWithCheck(int Id)
    {
        string apiUrl = "https://localhost:7122/api/Organization/check/" + Id;
        var response = await Http.DeleteAsync(apiUrl);
        var result = await response.Content.ReadAsStringAsync();

        if (!response.IsSuccessStatusCode)
        {
            await swal.FireAsync(new SweetAlertOptions
                {
                    Icon = SweetAlertIcon.Error,
                    Title = "Hata",
                    Text ="Öncelikle ilgili organizasyonda bulunan personeli siliniz."
                });
        }
        else
        {
            await swal.FireAsync(new SweetAlertOptions
                {
                    Icon = SweetAlertIcon.Success,
                    Title = "Başarılı",
                    Text ="Silme işlemi başarılı"
                });
            await GetOrganization();
        }
    }

    protected async Task NavigateToUpdateOrg(int Id)
    {
        string pageURl = "update-org/" + Id;

        NavigationManager.NavigateTo(pageURl);
    }
}
